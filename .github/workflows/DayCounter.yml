name: Actualizar cuenta regresiva

# Permisos explícitos para asegurar push
permissions:
  contents: write

on:
  schedule:
    - cron: "0 6 * * *"
  workflow_dispatch:

jobs:
  update-countdown:
    runs-on: ubuntu-latest

    steps:
      - name: Clonar el repositorio (checkout con todo)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          persist-credentials: true

      - name: Configurar Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Mostrar info del runner y fecha
        run: |
          echo "Runner date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_SHA: $GITHUB_SHA"

      - name: Actualizar README con la cuenta regresiva (y debug)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          README="README.md"

          # === Configura las fechas (ajusta si hace falta) ===
          FECHA_AVANCES="2025-11-02"
          FECHA_EXPO="2025-11-17"
          FECHA_PROYECTO="2025-11-24"

          # Fecha hoy en runner (formato YYYY-MM-DD)
          HOY=$(date +%Y-%m-%d)

          # Función segura para calcular días (enteros)
          dias_restantes() {
            local F="$1"
            # convertir a segundos
            local S_F=$(date -d "$F" +%s)
            local S_H=$(date -d "$HOY" +%s)
            echo $(( (S_F - S_H) / 86400 ))
          }

          DIAS_AVANCES=$(dias_restantes "$FECHA_AVANCES" || echo 0)
          DIAS_EXPO=$(dias_restantes "$FECHA_EXPO" || echo 0)
          DIAS_PROY=$(dias_restantes "$FECHA_PROYECTO" || echo 0)

          echo "HOY = $HOY"
          echo "DIAS_AVANCES = $DIAS_AVANCES"
          echo "DIAS_EXPO = $DIAS_EXPO"
          echo "DIAS_PROY = $DIAS_PROY"

          # Construir contenido en una variable temporal (para debug)
          TMP_FILE=$(mktemp)
          {
            echo "# 📅 Cuenta regresiva del proyecto"
            echo ""
            # Avances
            if [ "$DIAS_AVANCES" -gt 0 ]; then
              echo "$DIAS_AVANCES días para la **entrega de avances del proyecto**  "
            elif [ "$DIAS_AVANCES" -eq 0 ]; then
              echo "**🎯 Hoy se entrega los avances del proyecto 🎯**  "
            fi
            # Exposición
            if [ "$DIAS_EXPO" -gt 0 ]; then
              echo "$DIAS_EXPO días para la **exposición**  "
            elif [ "$DIAS_EXPO" -eq 0 ]; then
              echo "**🎤 Hoy es la exposición 🎤**  "
            fi
            # Proyecto final
            if [ "$DIAS_PROY" -gt 0 ]; then
              echo "$DIAS_PROY días para la **entrega del proyecto**  "
            elif [ "$DIAS_PROY" -eq 0 ]; then
              echo "**🚀 Hoy se entrega el proyecto final 🚀**  "
            fi
          } > "$TMP_FILE"

          echo "=== Contenido que se va a escribir en $README ==="
          cat "$TMP_FILE"
          echo "=== Fin contenido ==="

          # Sobrescribir README
          cp "$TMP_FILE" "$README"
          rm "$TMP_FILE"

          echo "Estado git antes de add/commit:"
          git status --porcelain || true
          echo "Contenido de
